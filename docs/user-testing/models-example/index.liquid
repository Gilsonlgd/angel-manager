import axios from 'axios';

// Definindo a interface que descreve a entidade {{ pascal.modelName }}
export interface {{ pascal.modelName }} {
  attribute1: string;
  attribute2: number;
}

// Classe {{ pascal.modelName }} com os métodos de comunicação com o banco de dados
export class {{ pascal.modelName }}Model {
  // URL base fictícia do backend
  private static baseUrl = 'https://api.ficticia.com/{{ plural.kebab.modelName }}';

  // Método para obter um {{ pascal.modelName }} pelo ID
  static async get(id: number): Promise<{{ pascal.modelName }}> {
    try {
      const response = await axios.get(`${this.baseUrl}/${id}`);
      return response.data;
    } catch (error) {
      throw new Error(`Erro ao buscar o {{ pascal.modelName }} com ID ${id}: ${error}`);
    }
  }

  // Método para listar todos os {{ plural.pascal.modelName }}
  static async index(): Promise<{{ pascal.modelName }}[]> {
    try {
      const response = await axios.get(this.baseUrl);
      return response.data;
    } catch (error) {
      throw new Error(`Erro ao listar os {{ plural.pascal.modelName }}: ${error}`);
    }
  }

  // Método para excluir um {{ pascal.modelName }} pelo ID
  static async delete(id: number): Promise<void> {
    try {
      await axios.delete(`${this.baseUrl}/${id}`);
    } catch (error) {
      throw new Error(`Erro ao excluir o {{ pascal.modelName }} com ID ${id}: ${error}`);
    }
  }

  // Método para criar um novo {{ pascal.modelName }}
  static async post({{ camel.modelName }}: {{ pascal.modelName }}): Promise<{{ pascal.modelName }}> {
    try {
      const response = await axios.post(this.baseUrl, {{ camel.modelName }});
      return response.data;
    } catch (error) {
      throw new Error(`Erro ao criar o {{ pascal.modelName }}: ${error}`);
    }
  }
}